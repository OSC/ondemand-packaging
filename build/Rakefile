require_relative 'build_lib'

DISTRO = ENV['DISTRO']
PACKAGE = ENV['PACKAGE']
WORK_DIR = "/work/#{DISTRO}"
OUTPUT_DIR = "/output/#{DISTRO}"
MOCK_CONFIG = {
  'el6' => 'epel-6-x86_64',
  'el7' => 'epel-7-x86_64',
}
if PACKAGE =~ /mod_auth_openidc/
  MOCK_ARGS = "--define 'scl httpd24'"
else
  MOCK_ARGS = nil
end
if ENV['DEBUG'] == 'true'
  cmd_suffix = ''
else
  cmd_suffix = '2>/dev/null 1>/dev/null'
end

def get_spec(dir)
  files = Dir["#{dir}/*.spec"]
  files[0]
end

def get_srpm()
  files = Dir['/home/ood/rpmbuild/SRPMS/*.src.rpm']
  files[0]
end

def get_rpms(dir)
  rpms = []
  Dir["#{dir}/*.rpm"].each do |rpm|
    if rpm =~ /\.src\.rpm$/
      next
    end
    rpms << rpm
  end
  rpms
end

namespace :build do
  desc "Bootstrap build environment"
  task :bootstrap do |task|
    puts "== #{task.name} ==".blue
    puts "\tClean build environment".blue
    sh "rm -rf /home/ood/rpmbuild/*/*"
    puts "\tBootstrap GPG".blue
    sh "echo '%_gpg_name #{ENV['GPG_NAME']}' >> ~/.rpmmacros"
    sh 'rm -rf ~/.gnupg'
    sh "gpg --import /ondemand-packaging/ondemand.sec #{cmd_suffix}"
    if ENV['GPG_PUBKEY'] && ! ENV['GPG_PUBKEY'].empty?
      sh "rpm --import /ondemand-packaging/stage/#{ENV['GPG_PUBKEY']} #{cmd_suffix}"
    end
  end

  desc "Build SRPM"
  task :srpm => :bootstrap do |task|
    puts "== #{task.name} ==".blue
    sh 'find /package -type f -exec cp {} /home/ood/rpmbuild/SOURCES/ \;'
    spec = get_spec('/home/ood/rpmbuild/SOURCES')
    spec_files = `spectool --list-files #{spec}`
    sources = []
    spec_files.each_line do |line|
      l = line.split(' ')
      s = l[1]
      source = File.basename(s)
      sources << source
    end
    get_sources = false
    sources.each do |source|
      f = File.join('/home/ood/rpmbuild/SOURCES', source)
      if ! File.exists?(f)
        get_sources = true
      end
    end
    if get_sources
        puts "\tDownloading sources defined in #{spec}".blue
        sh "spectool -g -R -S #{spec} #{cmd_suffix}"
    end
    puts "\tBuild SRPM for #{spec}".blue
    sh "rpmbuild -bs #{spec} #{cmd_suffix}"
  end

  desc "Build RPM"
  task :rpm => :srpm do |task|
    puts "== #{task.name} ==".blue
    srpm = get_srpm()
    puts "\tCleaning #{WORK_DIR}".blue
    sh "rm -rf #{WORK_DIR}/*"
    sh "mkdir -p #{WORK_DIR}"
    puts "\tRPM from #{srpm} for #{PACKAGE} #{DISTRO}".blue
    cmd = [
      "/usr/bin/mock --verbose -r #{MOCK_CONFIG[DISTRO]}",
      '--enable-network',
      '--resultdir', WORK_DIR,
    ]
    if MOCK_ARGS
      puts "\tUsing extra mock args: #{MOCK_ARGS}".blue
      cmd << MOCK_ARGS
    end
    cmd << "rebuild #{srpm} #{cmd_suffix}"
    sh cmd.join(' ')
  end

  desc "Build Finish"
  task :finish => :rpm do |task|
    puts "== #{task.name} ==".blue
    if ! File.directory?(OUTPUT_DIR)
      puts "\tCreating #{OUTPUT_DIR}".blue
      sh "mkdir -p #{OUTPUT_DIR}"
    end
    puts "\tcopy #{WORK_DIR}/*.rpm #{OUTPUT_DIR}/".blue
    sh "cp #{WORK_DIR}/*.rpm #{OUTPUT_DIR}/"
  end

  desc 'Sign RPMs'
  task :gpgsign => :bootstrap do |task|
    puts "== #{task.name} ==".blue
    get_rpms(OUTPUT_DIR).each do |rpm|
      puts "\tGPG signing #{rpm}".blue
      sh "/ondemand-packaging/rpm-sign.exp /ondemand-packaging/.gpgpass #{rpm} #{cmd_suffix}"
    end
  end

  desc 'Build Passenger and NGINX'
  task :passenger_nginx => :bootstrap do |task|
    puts "== #{task.name} ==".blue
    if ENV['GPG_SIGN'] == 'true'
      Rake::Task['build:gpgsign'].invoke
    end
  end
end

task :run do
  Rake::Task['build:rpm'].invoke
  Rake::Task['build:finish'].invoke
  if ENV['GPG_SIGN'] == 'true'
    Rake::Task['build:gpgsign'].invoke
  end
end
